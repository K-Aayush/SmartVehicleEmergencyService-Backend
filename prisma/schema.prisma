generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//user model for all users
model User {
  id               String                @id @default(uuid())
  name             String                @db.VarChar(50)
  email            String                @unique
  password         String                @db.VarChar(50)
  phone            String                @unique
  role             Role
  profileImage     String?
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  vehicles         Vehicle[]
  services         Service[]             @relation("UserServices")
  products         Product[]             @relation("VendorProducts")
  maintainanceLogs MaintainanceLog[]
  orders           Order[]
  Review           Review[]
  payment          Payment[]
  emergencyRequest EmergencyAssistance[]
}

enum Role {
  USER //Regular user (vehicle owner) 
  SERVICE_PROVIDER //mechanic
  VENDOR //spare parts seller
  ADMIN //Administrator
}

//vehicle model for user vehicles
model Vehicle {
  id               String                @id @default(uuid())
  userId           String
  model            String                @db.VarChar(50)
  brand            String
  vin              String                @unique
  year             Int
  image            String?
  user             User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  maintainanceLogs MaintainanceLog[]
  emergencyRequest EmergencyAssistance[]
}

//maintainance model for tracking maintainance activities on vehicles 
model MaintainanceLog {
  id          String   @id @default(uuid())
  vehicleId   String
  serviceType String
  description String
  serviceDate DateTime
  nextDueDate DateTime
  vehicle     Vehicle  @relation(fields: [vehicleId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User?    @relation(fields: [userId], references: [id])
  userId      String?
}

//service model for services offered by service providers
model Service {
  id                String   @id @default(uuid())
  serviceProviderId String
  name              String
  price             Float
  serviceProvider   User     @relation(fields: [serviceProviderId], references: [id], name: "UserServices")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

//product model for product sold by vendors
model Product {
  id        String         @id @default(uuid())
  VendorId  String
  name      String
  category  String
  price     Float
  stock     Int
  Vendor    User           @relation(fields: [VendorId], references: [id], name: "VendorProducts")
  images    ProductImage[]
  orders    Order[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

// productImage model for images associated with products
model ProductImage {
  id        String   @id @default(uuid())
  productId String
  imageUrl  String?
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
}

//order model for user orders
model Order {
  id         String   @id @default(uuid())
  userId     String
  productId  String
  quantity   Int
  totalPrice Float
  orderDate  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])
}

//Review model for products and services reviewed by users
model Review {
  id             String   @id @default(uuid())
  userId         String
  reviewableId   String
  reviewableType String
  rating         Int
  comment        String?
  user           User     @relation(fields: [userId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Payment {
  id            String        @id @default(uuid())
  userId        String
  amount        Float
  paymentMethod PaymentType
  status        PaymentStatus
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model EmergencyAssistance {
  id             String                    @id @default(uuid())
  userId         String
  vehicleId      String
  assistanceType EmergencyAssistanceType
  status         EmergencyAssistanceStatus
  description    String?
  location       String
  createdAt      DateTime                  @default(now())
  updatedAt      DateTime                  @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  vehicle Vehicle @relation(fields: [vehicleId], references: [id])
}

enum EmergencyAssistanceStatus {
  PENDING
  INPROGRESS
  COMPLETED
}

enum EmergencyAssistanceType {
  MECHANIC
  TOWING
  FUEL
}

enum PaymentStatus {
  PENDING
  INPROGRESS
  COMPLETED
}

enum PaymentType {
  credit
  WALLET
}

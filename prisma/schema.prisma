generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               String                @id @default(uuid())
  name             String                @db.VarChar(50)
  email            String                @unique
  password         String
  phone            String                @unique
  isBanned         Boolean               @default(false)
  banReason        String
  role             Role
  profileImage     String?
  companyName      String?
  latitude         Decimal?              @db.Decimal(10, 8)
  longitude        Decimal?              @db.Decimal(11, 8)
  isOnline         Boolean               @default(false)
  lastSeen         DateTime?
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  vehicles         Vehicle[]
  services         Service[]             @relation("UserServices")
  products         Product[]             @relation("VendorProducts")
  maintainanceLogs MaintainanceLog[]
  orders           Order[]
  Review           Review[]
  payment          Payment[]
  emergencyRequest EmergencyAssistance[]
  Notification     Notification[]
  sentChats        Chat[]                @relation("SentChats")
  receivedChats    Chat[]                @relation("ReceivedChats")
  location         Location[]
}

enum Role {
  USER
  SERVICE_PROVIDER
  VENDOR
  ADMIN
}

model Vehicle {
  id               String                @id @default(uuid())
  userId           String
  model            String                @db.VarChar(50)
  brand            String
  vin              String                @unique
  year             Int
  image            String?
  user             User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  maintainanceLogs MaintainanceLog[]
  emergencyRequest EmergencyAssistance[]
}

model MaintainanceLog {
  id          String   @id @default(uuid())
  vehicleId   String
  serviceType String
  description String
  serviceDate DateTime
  nextDueDate DateTime
  vehicle     Vehicle  @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String?
}

model Service {
  id                String   @id @default(uuid())
  serviceProviderId String
  name              String
  price             Float
  serviceProvider   User     @relation(fields: [serviceProviderId], references: [id], name: "UserServices", onDelete: Cascade)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Product {
  id        String         @id @default(uuid())
  vendorId  String
  name      String
  category  String
  price     Float
  stock     Int
  Vendor    User           @relation(fields: [vendorId], references: [id], name: "VendorProducts", onDelete: Cascade)
  images    ProductImage[]
  orders    Order[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model ProductImage {
  id        String   @id @default(uuid())
  productId String
  imageUrl  String?
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Order {
  id         String      @id @default(uuid())
  userId     String
  productId  String
  quantity   Int
  totalPrice Float
  status     OrderStatus @default(PROCESSING)
  orderDate  DateTime    @default(now())
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  product    Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Review {
  id             String   @id @default(uuid())
  userId         String
  reviewableId   String
  reviewableType String
  rating         Int
  comment        String?
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Payment {
  id            String        @id @default(uuid())
  userId        String
  amount        Float
  paymentMethod PaymentType
  status        PaymentStatus
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EmergencyAssistance {
  id             String                    @id @default(uuid())
  userId         String
  vehicleId      String
  assistanceType EmergencyAssistanceType
  status         EmergencyAssistanceStatus
  description    String?
  location       String
  latitude       Decimal                   @db.Decimal(10, 8)
  longitude      Decimal                   @db.Decimal(11, 8)
  createdAt      DateTime                  @default(now())
  updatedAt      DateTime                  @updatedAt
  user           User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  vehicle        Vehicle                   @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Chat {
  id         String   @id @default(uuid())
  senderId   String
  receiverId String
  message    String   @db.Text
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  sender     User     @relation("SentChats", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User     @relation("ReceivedChats", fields: [receiverId], references: [id], onDelete: Cascade)

  @@index([senderId, receiverId])
}

model Location {
  id          String   @id @default(uuid())
  userId      String   @unique
  latitude    Decimal  @db.Decimal(10, 8)
  longitude   Decimal  @db.Decimal(11, 8)
  isAvailable Boolean  @default(true)
  lastUpdated DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([latitude, longitude])
}

enum EmergencyAssistanceStatus {
  PENDING
  INPROGRESS
  COMPLETED
}

enum EmergencyAssistanceType {
  MECHANIC
  TOWING
  FUEL
}

enum PaymentStatus {
  PENDING
  INPROGRESS
  COMPLETED
}

enum PaymentType {
  CREDIT
  WALLET
}

enum OrderStatus {
  PROCESSING
  SHIPPED
  DELIVERED
  COMPLETED
}
